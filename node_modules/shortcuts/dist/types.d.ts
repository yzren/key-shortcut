declare type Chord = string;
declare type ChordID = number;
declare type Shortcut = string;
declare type ShortcutID = ChordID[];
declare type RecordHandler = (shortcut: Shortcut) => any;
declare type ShouldHandleEventFunction = (event: KeyboardEvent) => boolean;
declare type ListenerOptions = {
    handler: (id: ShortcutID, event: KeyboardEvent) => import('./enums').ListenerResult | ShortcutID;
    capture?: boolean;
    target?: Node;
    shouldHandleEvent?: ShouldHandleEventFunction;
};
declare type ShortcutsOptions = {
    capture?: boolean;
    shortcuts?: ShortcutDescriptor[];
    shouldHandleEvent?: ShouldHandleEventFunction;
    target?: Node;
};
declare type ShortcutsTree = {
    [id: number]: ShortcutsTree;
    parent?: ShortcutsTree;
    id?: ChordID;
    size: number;
    handlers: Function[];
};
declare type ShortcutDescriptor = {
    handler?: (event: KeyboardEvent) => boolean | void;
    shortcut: string;
};
export { Chord, ChordID, Shortcut, ShortcutID, RecordHandler, ShouldHandleEventFunction, ListenerOptions, ShortcutsOptions, ShortcutsTree, ShortcutDescriptor };
