"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
var consts_1 = require("./consts");
var utils_1 = require("./utils");
/* SHORTCUT */
var Shortcut = {
    /* MODIFIER KEY */
    getModifierKey: function (id) {
        return consts_1.default.modifierKeyBitmask & id;
    },
    hasModifierKey: function (id) {
        return !!Shortcut.getModifierKey(id);
    },
    /* TRIGGER KEY */
    getTriggerKey: function (id) {
        return consts_1.default.triggerKeyBitmask & id;
    },
    hasTriggerKey: function (id) {
        return !!Shortcut.getTriggerKey(id);
    },
    /* EVENT */
    event2id: function (event) {
        /* TRIGGER */
        var isKeypress = (event.type === 'keypress'), code = event.which || event.keyCode, char = String.fromCharCode(code).toLowerCase(), key = event.key;
        var id = isKeypress ? consts_1.default.key2id[key] || consts_1.default.key2id[char] || 0 : consts_1.default.code2id[code] || consts_1.default.key2id[char] || consts_1.default.key2id[key] || 0;
        /* MODIFIERS */
        if (event.ctrlKey)
            id |= consts_1.default.key2id.ctrl;
        if (event.altKey)
            id |= consts_1.default.key2id.alt;
        if (event.shiftKey)
            id |= consts_1.default.key2id.shift;
        if (event.metaKey)
            id |= consts_1.default.key2id.cmd;
        return id;
    },
    event2shortcut: function (event) {
        return Shortcut.id2shortcut([Shortcut.event2id(event)]);
    },
    event2accelerator: function (event) {
        return Shortcut.id2accelerator([Shortcut.event2id(event)]);
    },
    event2symbols: function (event) {
        return Shortcut.id2symbols([Shortcut.event2id(event)]);
    },
    /* CHORD */
    chord2id: utils_1.default.memoize(function (chord) {
        var keys = chord.replace(utils_1.default.plusesRe, '+Plus').toLowerCase().split('+');
        return keys.reduce(function (keyCode, key) {
            return keyCode | (consts_1.default.key2id[key] || 0);
        }, 0);
    }),
    chord2accelerator: function (chord) {
        return Shortcut.id2accelerator([Shortcut.chord2id(chord)]);
    },
    chord2symbols: function (chord) {
        return Shortcut.id2symbols([Shortcut.chord2id(chord)]);
    },
    /* SHORTCUT */
    shortcut2id: utils_1.default.memoize(function (shortcut) {
        var chords = shortcut.split(utils_1.default.whitespaceRe);
        return chords.map(Shortcut.chord2id);
    }),
    shortcut2accelerator: utils_1.default.memoize(function (shortcut) {
        return Shortcut.id2accelerator(Shortcut.shortcut2id(shortcut));
    }),
    shortcut2symbols: utils_1.default.memoize(function (shortcut) {
        return Shortcut.id2symbols(Shortcut.shortcut2id(shortcut));
    }),
    /* ID */
    isValidID: function (id) {
        return id.find(function (id) { return !id; }) === undefined;
    },
    checkValidID: function (id) {
        var isValid = Shortcut.isValidID(id);
        if (!isValid)
            console.error("Invalid shortcut: \"" + Shortcut.id2accelerator(id) + "\"");
        ;
        return isValid;
    },
    id2output: function (id, outputMap, chordSeparator, sequenceSeparator) {
        if (outputMap === void 0) { outputMap = {}; }
        if (chordSeparator === void 0) { chordSeparator = '+'; }
        if (sequenceSeparator === void 0) { sequenceSeparator = ' '; }
        var _a = consts_1.default.key2id, ctrl = _a.ctrl, alt = _a.alt, shift = _a.shift, cmd = _a.cmd;
        return id.map(function (id) {
            var keys = [];
            if (ctrl & id)
                keys.push(outputMap[ctrl]);
            if (alt & id)
                keys.push(outputMap[alt]);
            if (shift & id)
                keys.push(outputMap[shift]);
            if (cmd & id)
                keys.push(outputMap[cmd]);
            var triggerKey = Shortcut.getTriggerKey(id);
            if (triggerKey)
                keys.push(outputMap[triggerKey] || String.fromCharCode(triggerKey).toUpperCase());
            return keys.join(chordSeparator);
        }).join(sequenceSeparator);
    },
    id2shortcut: utils_1.default.memoize(function (id) {
        return Shortcut.id2output(id, consts_1.default.id2shortcut);
    }),
    id2accelerator: utils_1.default.memoize(function (id) {
        return Shortcut.id2output(id, consts_1.default.id2accelerator);
    }),
    id2symbols: utils_1.default.memoize(function (id) {
        return Shortcut.id2output(id, consts_1.default.id2symbol, '');
    })
};
/* EXPORT */
exports.default = Shortcut;
